xaxis = list(title = "Counts - 2040"),
yaxis = list(title = "Est. Volume"))
p %>%
add_trace(x = ~CNT_2040, y = ~fitted(loess(V_1 ~ CNT_2040)),
type = "scatter", mode = "lines",
line = list(dash = "dashed")) %>%
layout (title = "Counts to Volume",
xaxis = list(title = "Counts - 2040"),
yaxis = list(title = "Est. Volume"))
p %>%
add_trace(x = ~CNT_2040, y = ~fitted(loess(V_1 ~ CNT_2040)),
type = "scatter", mode = "lines", showlegend = TRUE,
line = list(dash = "dashed")) %>%
layout (title = "Counts to Volume",
xaxis = list(title = "Counts - 2040"),
yaxis = list(title = "Est. Volume"))
~fitted(loess(V_1 ~ CNT_2040)
summary(reg)
p %>%
add_trace(x = x , y = y2,
type = "scatter", mode = "lines", showlegend = TRUE,
line = list(dash = "dashed")) %>%
layout (title = "Counts to Volume",
xaxis = list(title = "Counts - 2040"),
yaxis = list(title = "Est. Volume"))
y2 = reg$fitted.values
p %>%
add_trace(x = x , y = y2,
type = "scatter", mode = "lines", showlegend = TRUE,
line = list(dash = "dashed")) %>%
layout (title = "Counts to Volume",
xaxis = list(title = "Counts - 2040"),
yaxis = list(title = "Est. Volume"))
p %>%
add_trace(x = x , y = y2,
type = "scatter", mode = "lines",
line = list(dash = "dashed")) %>%
layout (title = "Counts to Volume", showlegend = T,
xaxis = list(title = "Counts - 2040"),
yaxis = list(title = "Est. Volume"))
p %>%
add_trace(x = x , y = y2,
type = "scatter", mode = "lines",
line = list(dash = "dashed")) %>%
layout (title = "Counts to Volume", showlegend = F,
xaxis = list(title = "Counts - 2040"),
yaxis = list(title = "Est. Volume"))
?add_trace()
R2 = summary(reg)$r.squared
R2
round(R2, -2)
round(R2, -4)
round(R2, 4)
p %>%
add_trace(x = x , y = y2,
type = "scatter", mode = "lines",
line = list(dash = "dashed")) %>%
layout (title = "Counts to Volume",
xaxis = list(title = "Counts - 2040"),
yaxis = list(title = "Est. Volume"),
annotations = list(x = x, y = y, text = round(R2,3), showarrow = T))
p %>%
add_trace(x = x , y = y2,
type = "scatter", mode = "lines",
line = list(dash = "dashed")) %>%
layout (title = "Counts to Volume",
xaxis = list(title = "Counts - 2040"),
yaxis = list(title = "Est. Volume"),
annotations = list(x = max(x), y = max(y), text = round(R2,3), showarrow = T))
p %>%
add_trace(x = x , y = y2,
type = "scatter", mode = "lines",
line = list(dash = "dashed")) %>%
layout (title = "Counts to Volume",
xaxis = list(title = "Counts - 2040"),
yaxis = list(title = "Est. Volume"),
annotations = list(x = max(x), y = max(y), text = paste0("R-Squared = ",round(R2,3))))
p %>%
add_trace(x = x , y = y2,
type = "scatter", mode = "lines",
line = list(dash = "dashed")) %>%
layout (title = "Counts to Volume",
xaxis = list(title = "Counts - 2040"),
yaxis = list(title = "Est. Volume"),
annotations = list(x = max(x), y = max(y), showarrow = F,
text = paste0("R-Squared = ",round(R2,3))))
p %>%
add_trace(x = x , y = y2,
type = "scatter", mode = "lines",
line = list(dash = "dashed")) %>%
layout (title = "Counts to Volume",
xaxis = list(title = "Counts - 2040"),
yaxis = list(title = "Est. Volume"),
annotations = list(x = max(x), y = max(y), showarrow = F,
text = paste0("R-Squared = ",round(R2,4))))
q %>%
add_trace(x = x , y = y2,
type = "scatter", mode = "lines",
line = list(dash = "dashed")) %>%
layout (title = "Counts to Volume",
xaxis = list(title = "Counts - 2040"),
yaxis = list(title = "Est. Volume"),
annotations = list(x = max(x), y = max(y), showarrow = F,
text = paste0("R-Squared = ",round(R2,4))))
ggplot(data=count_links@data, aes(x = CNT_2040, y = V_1)) +
geom_point(aes(text = paste("Location:", LOC)), size = .5) +
geom_smooth(aes(colour = FTYPE, fill = FTYPE))
r <- p %>%
add_trace(x = x , y = y2,
type = "scatter", mode = "lines",
line = list(dash = "dashed")) %>%
layout (title = "Counts to Volume",
xaxis = list(title = "Counts - 2040"),
yaxis = list(title = "Est. Volume"),
annotations = list(x = max(x), y = max(y), showarrow = F,
text = paste0("R-Squared = ",round(R2,4))))
r %>%  geom_smooth(aes(colour = FTYPE, fill = FTYPE)) + facet_wrap(~ FTYPE)
r
q
r <- p %>%
add_trace(x = x , y = y2,
type = "scatter", mode = "lines",
line = list(dash = "dashed")) %>%
layout (title = "Counts to Volume",
xaxis = list(title = "Counts - 2040"),
yaxis = list(title = "Est. Volume"),
annotations = list(x = max(x), y = max(y), showarrow = F,
text = paste0("R-Squared = ",round(R2,4))))
r
summary(reg)
reg$residuals
rmse <- function(error)
{
sqrt(mean(error^2))
}
rmse(reg$residuals)
length(reg$residuals)
reg
reg$x
reg.list()
?lm()
reg$df.residual
reg$terms
reg$xlevels
reg$x
prmse <- function(error, obs)
{
rmse(error) * (100 * length(obs) / sum(obs))
}
prmse(reg$residuals,x)
rmse(error) * (100 * length(obs) / sum(obs))
prmse <- function(error, n, obs)
{
rmse(error) * (100 * n / sum(obs))
}
prmse(reg$residuals, reg$df.residual,x)
prmse <- function(error, obs)
{
rmse(error) * (100 * length(obs) / sum(obs))
}
prmse(reg$residuals,x)
prmse <- function(error, obs)
{
rmse = sqrt(mean(error^2))
prmse = rmse * (100 * length(obs) / sum(obs))
return(prmse)
}
prmse(reg$residuals,x)
# Function that returns % Root Mean Squared Error
prmse <- function(error, obs)
{
rmse = sqrt(mean(error^2))
prmse = rmse * (100 * length(obs) / sum(obs))
return(prmse)
}
prmse(reg$residuals,x)
r <- p %>%
add_trace(x = x , y = y2,
type = "scatter", mode = "lines",
line = list(dash = "dashed")) %>%
layout (title = "Counts to Volume",
xaxis = list(title = "Counts - 2040"),
yaxis = list(title = "Est. Volume"),
annotations = list(x = max(x), y = max(y), showarrow = F,
text = paste0("R-Squared = ",round(R2,4), "\n",
"%RMSE = ", round(prmse,4))))
prmse
# Compute R-Squared and %RMSE
Compute_PRMSE_RSq <- function(data){
reg = lm(y ~ x)
R2 = summary(reg)$r.squared
rmse = sqrt(mean(error^2))
prmse = rmse * (100 * length(obs) / sum(obs))
return(list("R2" = R2, fitted = reg$fitted.values, "prmse" = prmse))
}
# Add R-Squared
x = count_links@data$CNT_2040
y = count_links@data$V_1
stats <- Compute_PRMSE_RSq(x,y)
y2 = stats$fitted
r <- p %>%
add_trace(x = x , y = stats$fitted,
type = "scatter", mode = "lines",
line = list(dash = "dashed")) %>%
layout (title = "Counts to Volume",
xaxis = list(title = "Counts - 2040"),
yaxis = list(title = "Est. Volume"),
annotations = list(x = max(x), y = max(y), showarrow = F,
text = paste0("R-Squared = ",round(stats$R2,4), "\n",
"%RMSE = ", round(stats$prmse,2))))
Compute_PRMSE_RSq <- function(x,y){
reg = lm(y ~ x)
R2 = summary(reg)$r.squared
rmse = sqrt(mean(error^2))
prmse = rmse * (100 * length(obs) / sum(obs))
return(list("R2" = R2, fitted = reg$fitted.values, "prmse" = prmse))
}
# Add R-Squared
x = count_links@data$CNT_2040
y = count_links@data$V_1
stats <- Compute_PRMSE_RSq(x,y)
y2 = stats$fitted
r <- p %>%
add_trace(x = x , y = stats$fitted,
type = "scatter", mode = "lines",
line = list(dash = "dashed")) %>%
layout (title = "Counts to Volume",
xaxis = list(title = "Counts - 2040"),
yaxis = list(title = "Est. Volume"),
annotations = list(x = max(x), y = max(y), showarrow = F,
text = paste0("R-Squared = ",round(stats$R2,4), "\n",
"%RMSE = ", round(stats$prmse,2))))
stats <- Compute_PRMSE_RSq(x,y)
Compute_PRMSE_RSq <- function(x,y){
reg = lm(y ~ x)
R2 = summary(reg)$r.squared
rmse = sqrt(mean(reg$residuals^2))
prmse = rmse * (100 * length(x) / sum(x))
return(list("R2" = R2, fitted = reg$fitted.values, "prmse" = prmse))
}
# Add R-Squared
x = count_links@data$CNT_2040
y = count_links@data$V_1
stats <- Compute_PRMSE_RSq(x,y)
y2 = stats$fitted
r <- p %>%
add_trace(x = x , y = stats$fitted,
type = "scatter", mode = "lines",
line = list(dash = "dashed")) %>%
layout (title = "Counts to Volume",
xaxis = list(title = "Counts - 2040"),
yaxis = list(title = "Est. Volume"),
annotations = list(x = max(x), y = max(y), showarrow = F,
text = paste0("R-Squared = ",round(stats$R2,4), "\n",
"%RMSE = ", round(stats$prmse,2))))
r
library(foreign)
path <- "C:\\projects\\Veterans_ExpressWay\\ODME\\Review"
netShape <- "shapeFiles\\Subarea_Hwy.shp"
loaded_network <- "odme_loaded\\2020_ODME_loaded.dbf"
loaded <- read.dbf(loaded_network)
View(loaded)
count_links <- loaded %>% subset(loaded[,count_field] > 0)
# Script to extract assignment volumes and plot the differences
# EPSG:2236 for State plane Florida East (feet)
path <- "C:\\projects\\Veterans_ExpressWay\\ODME\\Review"
netShape <- "shapeFiles\\Subarea_Hwy.shp"
loaded_network <- "odme_loaded\\2020_ODME_loaded.dbf"
# user settings
# netShapes <- c("AM_Network_A2015.shp",
#                 "MD_Network_A2015.shp",
#                 "PM_Network_A2015.shp",
#                 "EV_Network_A2015.shp",
#                 "EA_Network_A2015.shp")
count_field <- "CNT_2040"
volume_field <- "V_1"
# load libraries
library(foreign)
library(dplyr)
library(tidyr)
library(leaflet)
library(rgdal)
library(maptools)
library(ggplot2)
library(plotly)
setwd(path)
# function to get filename without extension
getLayerName <- function(filename_with_ext){
parts = strsplit(filename_with_ext, "\\\\")
filename = parts[[1]][length(parts[[1]])]
return (unlist(strsplit(filename, "\\."))[1])
}
# Read shape file
layerName <- getLayerName(netShape)
network <- readOGR(netShape,layerName)
loaded <- read.dbf(loaded_network)
# only selected fields
network@data <- network@data %>%
select(A, B, NUM_LANES, SPEED, CAPACITY,
FTYPE, LOC, CNT_2020, CNT_2040, V_1)
# ToDO rename V_1 as estimated volume for corresponding year
count_links <- loaded %>%
filter(loaded[,count_field] > 0) %>%
select(A, B, NUM_LANES, SPEED, CAPACITY,
FTYPE, LOC, CNT_2020, CNT_2040, V_1)
# TODO: Fix the shape file with Lat/Lons to plot
# Set projection (if exist overwrite it)
# proj4string(network) <- CRS("+init=epsg:2236")
# network <- spTransform(network, CRS("+proj=longlat +datum=WGS84 +no_defs"))
# map <- leaflet() %>%
#        addTiles() %>%
#        setView(lng = -82.5381, lat = 28.0679, zoom = 11) %>%
#        addPolylines(data = network, color = "black", weight = 2)
#
# writeOGR(obj=count_links, dsn = "count_links.shp", layer="count_links", driver="ESRI Shapefile")
# fix FTYPE code on one of the main line
loaded$FTYPE[loaded$FTYPE == 0] <- 71
loaded$FTYPE <- as.factor(loaded$FTYPE)
# Function to plot
p <- qplot(CNT_2040, V_1, data=loaded, colour=FTYPE)
p <- ggplotly(p)
q <- ggplot(data=loaded, aes(x = CNT_2040, y = V_1)) +
geom_point(aes(text = paste("Location:", LOC)), size = .5) +
geom_smooth(aes(colour = FTYPE, fill = FTYPE)) + facet_wrap(~ FTYPE)
q <- ggplotly(q)
# Compute R-Squared and %RMSE
Compute_PRMSE_RSq <- function(x,y){
reg = lm(y ~ x)
R2 = summary(reg)$r.squared
rmse = sqrt(mean(reg$residuals^2))
prmse = rmse * (100 * length(x) / sum(x))
return(list("R2" = R2, fitted = reg$fitted.values, "prmse" = prmse))
}
# Add R-Squared
x = loaded$CNT_2040
y = loaded$V_1
stats <- Compute_PRMSE_RSq(x,y)
y2 = stats$fitted
r <- p %>%
add_trace(x = x , y = stats$fitted,
type = "scatter", mode = "lines",
line = list(dash = "dashed")) %>%
layout (title = "Counts to Volume",
xaxis = list(title = "Counts - 2040"),
yaxis = list(title = "Est. Volume"),
annotations = list(x = max(x), y = max(y), showarrow = F,
text = paste0("R-Squared = ",round(stats$R2,4), "\n",
"%RMSE = ", round(stats$prmse,2))))
r
x <- "CNT_2040"
loaded %>% filter(get("CNT_2020") > 0 )
# Script to extract assignment volumes and plot the differences
# EPSG:2236 for State plane Florida East (feet)
path <- "C:\\projects\\Veterans_ExpressWay\\ODME\\Review"
netShape <- "shapeFiles\\Subarea_Hwy.shp"
loaded_network <- "odme_loaded\\2020_ODME_loaded.dbf"
# user settings
# netShapes <- c("AM_Network_A2015.shp",
#                 "MD_Network_A2015.shp",
#                 "PM_Network_A2015.shp",
#                 "EV_Network_A2015.shp",
#                 "EA_Network_A2015.shp")
count_field <- "CNT_2040"
volume_field <- "V_1"
# load libraries
library(foreign)
library(dplyr)
library(tidyr)
library(leaflet)
library(rgdal)
library(maptools)
library(ggplot2)
library(plotly)
setwd(path)
# function to get filename without extension
getLayerName <- function(filename_with_ext){
parts = strsplit(filename_with_ext, "\\\\")
filename = parts[[1]][length(parts[[1]])]
return (unlist(strsplit(filename, "\\."))[1])
}
# Read shape file
layerName <- getLayerName(netShape)
network <- readOGR(netShape,layerName)
loaded <- read.dbf(loaded_network)
# only selected fields
network@data <- network@data %>%
select(A, B, NUM_LANES, SPEED, CAPACITY,
FTYPE, LOC, CNT_2020, CNT_2040, V_1)
# ToDO rename V_1 as estimated volume for corresponding year
count_links <- loaded %>%
loaded %>% filter(get("CNT_2020") > 0 ) %>%
select(A, B, NUM_LANES, SPEED, CAPACITY,
FTYPE, LOC, CNT_2020, CNT_2040, V_1)
# TODO: Fix the shape file with Lat/Lons to plot
# Set projection (if exist overwrite it)
# proj4string(network) <- CRS("+init=epsg:2236")
# network <- spTransform(network, CRS("+proj=longlat +datum=WGS84 +no_defs"))
# map <- leaflet() %>%
#        addTiles() %>%
#        setView(lng = -82.5381, lat = 28.0679, zoom = 11) %>%
#        addPolylines(data = network, color = "black", weight = 2)
#
# writeOGR(obj=count_links, dsn = "count_links.shp", layer="count_links", driver="ESRI Shapefile")
# fix FTYPE code on one of the main line
count_links$FTYPE[count_links$FTYPE == 0] <- 71
count_links$FTYPE <- as.factor(count_links$FTYPE)
# Function to plot
p <- qplot(CNT_2040, V_1, data = count_links, colour = FTYPE)
p <- ggplotly(p)
q <- ggplot(data = count_links, aes(x = CNT_2020, y = V_1)) +
geom_point(aes(text = paste("Location:", LOC)), size = .5) +
geom_smooth(aes(colour = FTYPE, fill = FTYPE)) + facet_wrap(~ FTYPE)
q <- ggplotly(q)
# Compute R-Squared and %RMSE
Compute_PRMSE_RSq <- function(x,y){
reg = lm(y ~ x)
R2 = summary(reg)$r.squared
rmse = sqrt(mean(reg$residuals^2))
prmse = rmse * (100 * length(x) / sum(x))
return(list("R2" = R2, fitted = reg$fitted.values, "prmse" = prmse))
}
# Add R-Squared
x = count_links$CNT_2040
y = count_links$V_1
stats <- Compute_PRMSE_RSq(x,y)
y2 = stats$fitted
r <- p %>%
add_trace(x = x , y = stats$fitted,
type = "scatter", mode = "lines",
line = list(dash = "dashed")) %>%
layout (title = "Counts to Volume",
xaxis = list(title = "Counts - 2020"),
yaxis = list(title = "Est. Volume"),
annotations = list(x = max(x), y = max(y), showarrow = F,
text = paste0("R-Squared = ",round(stats$R2,4), "\n",
"%RMSE = ", round(stats$prmse,2))))
r
loaded
View(loaded)
count_links$FTYPE[count_links$FTYPE == 0] <- 71
count_links$FTYPE <- as.factor(count_links$FTYPE)
p <- qplot(CNT_2040, V_1, data = count_links, colour = FTYPE)
p <- ggplotly(p)
p
q <- ggplot(data = count_links, aes(x = CNT_2020, y = V_1)) +
geom_point(aes(text = paste("Location:", LOC)), size = .5) +
geom_smooth(aes(colour = FTYPE, fill = FTYPE)) + facet_wrap(~ FTYPE)
q <- ggplotly(q)
q
# Add R-Squared
x = count_links$CNT_2020
y = count_links$V_1
stats <- Compute_PRMSE_RSq(x,y)
y2 = stats$fitted
p
r <- p %>%
add_trace(x = x , y = stats$fitted,
type = "scatter", mode = "lines",
line = list(dash = "dashed")) %>%
layout (title = "Counts to Volume",
xaxis = list(title = "Counts - 2020"),
yaxis = list(title = "Est. Volume"),
annotations = list(x = max(x), y = max(y), showarrow = F,
text = paste0("R-Squared = ",round(stats$R2,4), "\n",
"%RMSE = ", round(stats$prmse,2))))
r
x = count_links$CNT_2020
y = count_links$V_1
stats <- Compute_PRMSE_RSq(x,y)
y2 = stats$fitted
r <- p %>%
add_trace(x = x , y = stats$fitted,
type = "scatter", mode = "lines",
line = list(dash = "dashed")) %>%
layout (title = "Counts to Volume",
xaxis = list(title = "Counts - 2020"),
yaxis = list(title = "Est. Volume"),
annotations = list(x = max(x), y = max(y), showarrow = F,
text = paste0("R-Squared = ",round(stats$R2,4), "\n",
"%RMSE = ", round(stats$prmse,2))))
r
p <- qplot(CNT_2020, V_1, data = count_links, colour = FTYPE)
p <- ggplotly(p)
q <- ggplot(data = count_links, aes(x = CNT_2020, y = V_1)) +
geom_point(aes(text = paste("Location:", LOC)), size = .5) +
geom_smooth(aes(colour = FTYPE, fill = FTYPE)) + facet_wrap(~ FTYPE)
q <- ggplotly(q)
# Compute R-Squared and %RMSE
Compute_PRMSE_RSq <- function(x,y){
reg = lm(y ~ x)
R2 = summary(reg)$r.squared
rmse = sqrt(mean(reg$residuals^2))
prmse = rmse * (100 * length(x) / sum(x))
return(list("R2" = R2, fitted = reg$fitted.values, "prmse" = prmse))
}
# Add R-Squared
x = count_links$CNT_2020
y = count_links$V_1
stats <- Compute_PRMSE_RSq(x,y)
y2 = stats$fitted
r <- p %>%
add_trace(x = x , y = stats$fitted,
type = "scatter", mode = "lines",
line = list(dash = "dashed")) %>%
layout (title = "Counts to Volume",
xaxis = list(title = "Counts - 2020"),
yaxis = list(title = "Est. Volume"),
annotations = list(x = max(x), y = max(y), showarrow = F,
text = paste0("R-Squared = ",round(stats$R2,4), "\n",
"%RMSE = ", round(stats$prmse,2))))
r
r
